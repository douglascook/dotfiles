" install plug if its not already there
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" need to set this before loading polyglot :|
let g:polyglot_disabled = ['yaml']

" -------------------------- PLUGIN SETUP ---------------------------------
call plug#begin('~/.vim/bundle')

Plug 'dense-analysis/ale'
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py' }
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'airblade/vim-gitgutter'

Plug 'vimwiki/vimwiki'

Plug 'preservim/nerdtree'
Plug 'itchyny/lightline.vim'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-unimpaired'
Plug 'ryanoasis/vim-devicons'

call plug#end()


" ----------------------------- NORMAL STUFF ------------------------------

colorscheme wombat256mod
set number			               " show line numbers

" use space as leader
nnoremap <space> <Nop>
let mapleader=" "

set tabstop=2
set shiftwidth=2
set expandtab			             " use spaces for tabs
set softtabstop=2              " for deleting multiple spaces at a time if they were a tab?

set linebreak                  " stops lines from wrapping in the middle of words
set breakindent                " use same level indentation on wrapped lines
set colorcolumn=80             " highlight at 80 characters
set winwidth=90                " set current pane to width 90 (if less) when moving into it
set cursorline                 " highlight current line
set guicursor=a:blinkon0       " disable cursor blink in GUIs
set scrolloff=8                " keep 3 lines visible around current line when scrolling
set termguicolors              " use full 24-bit colours
set guifont=Hack\ Nerd\ Font\ Mono:h14

set hidden                     " allow modified buffers to be hidden without saving changes
set history=1000               " remember more previous commands
set synmaxcol=200              " only do syntax highlighting on first columns for speedup with very long lines

set wildmenu                   " fix autocomplete for opening files with :e
set wildmode=longest:full,list:full

set hlsearch                   " start highlighting matches as they are typed
set incsearch
set smartcase                  " case insensitive search unless capitals are specified
set ignorecase

set backupdir=~/.vim/backup//  " put all swap files and backups in one folder
set directory=~/.vim/swp//
set updatetime=500             " write swap files every 500ms, dictates git-gutter update rate

set modelines=0                " fix potential vulnerability https://www.cvedetails.com/cve/CVE-2007-2438/
set encoding=utf-8
set ttyfast
set lazyredraw
set autoread                   " reload buffer automatically if file changed outside vim

set noerrorbells               " disable error noises/flashes
set novisualbell
set vb t_vb=

set foldmethod=syntax
set nofoldenable               " start with all folds open

" diff in vertical splits by default, don't fold until 4 cols nested
set diffopt=filler,vertical,foldcolumn:4

" set working directory
cd ./

" reload vimrc automatically when it is saved
augroup reload_vimrc
  autocmd! bufwritepost .vimrc source %
augroup END

" syntax highlighting slows down loading for larger files
augroup large_files
  autocmd Filetype json if getfsize(@%) > 1000 | setlocal syntax=off foldmethod=indent | endif
augroup END

" workaround for bug in gx - see https://github.com/vim/vim/issues/4738
nnoremap gx :call netrw#BrowseX(netrw#GX(),0)<cr>

" open help in full height vertical split on the right
cnoreabbrev h vert bo h

" ---------------------------- SHORTCUT MAPPINGS ----------------------------
" can't have inline commments here, whitespace after the mapping is added to it!

" get rid of highlighting
nnoremap <leader><space> :noh<CR>

" saving
nnoremap <leader>s :w<CR>
cnoreabbrev W w
" strip all trailing whitespace and save
nnoremap <leader>a :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>:w<CR>

" quitting
nnoremap <leader>q :q<CR>

" get rid of annoying f1 help popup
:nmap <F1> <nop>
:imap <F1> <nop>

" add a python breakpoint
function! InsertBreakpoint()
    let trace = expand("breakpoint()")
    execute "normal o".trace
endfunction

nnoremap <leader>p :call InsertBreakpoint()<CR>

" JSON pretty-print contents of buffer
nnoremap <leader>j :% ! python -m json.tool<CR>
" python 3.9 onwards
nnoremap <leader>jl :% ! python -m json.tool --json-lines<CR>

" colour schemes
nnoremap <F2> :colorscheme wombat256mod<CR>
nnoremap <F4> :colorscheme solarized<CR>
nnoremap <F6> :colorscheme seoul256<CR>
nnoremap <F10> :let &background = ( &background == "dark"? "light" : "dark" )<CR>

" Use silver searcher for grepping if available
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --column
  set grepformat=%f:%l:%c%m
endif


" ----------------------------- PLUGINS -----------------------------

" NERDTREE
let g:NERDTreeWinSize = 40
let g:NERDTreeChDirMode = 2 " change vim working dir when nerdtree root changes
let g:NERDTreeCascadeSingleChildDir = 0 " don't collapse single child nodes by default
let g:NERDTreeIgnore = ['\.vim$', '\~$', '__pycache__$[[dir]]']

map <leader>n :NERDTreeToggle<CR>
map <leader>m :NERDTreeFind<CR>


" LIGHTLINE
set laststatus=2 " always display the status bar, even with single pane

" Use relative paths, path only for inactive split
let g:lightline = {
   \'active': {
   \  'left': [['mode', 'paste'],
   \           ['readonly', 'relativepath', 'modified']],
   \  'right': [['lineinfo'],
   \            ['percent'],
   \            ['fileformat', 'fileencoding', 'filetype']]
   \},
   \'inactive': {
   \  'left': [['relativepath']],
   \  'right': [[]],
   \},
   \'colorscheme': 'seoul256',
\}

" ALE
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_sign_info = '--'

let g:ale_linters = {
\  'python': ['pylint', 'mypy', 'flake8', 'ruff'],
\  'javascript': ['eslint'],
\}
let g:ale_fixers = {
\  'python': ['black', 'isort'],
\  'go': ['gofmt'],
\  'rust': ['rustfmt']
\}
" lint on leaving insert mode and opening or saving a buffer
let g:ale_lint_on_text_changed = 'never'
let g:ale_fix_on_save = 1
let g:ale_echo_msg_format = '%linter% says: %s'
let g:ale_echo_delay = 100 " wait longer than default before displaying messages
let g:ale_maximum_file_size = 1000000 " don't try to lint massive files eg data files
let g:ale_virtualtext_cursor = 'disabled' " don't display messages as virtualtext

let g:ale_python_pylint_change_directory = 1
let g:ale_python_mypy_ignore_invalid_syntax = 1

let g:ale_sql_sqlfluff_options = '--dialect postgres'


" enable django pylint plugin for environments its installed in
autocmd Filetype python call EnablePylintDjangoIfInstalled()
function EnablePylintDjangoIfInstalled()
  let importError = system('python -c "import pylint_django"')
  if importError == ''
    let g:ale_python_pylint_options = '--load-plugins pylint_django'
  endif
endfunction


" YOUCOMPLETEME
let g:ycm_filetype_blacklist = {
\  'sql': 1,
\  'csv': 1,
\  'text': 1,
\  'vimwiki': 1,
\  'json': 1,
\  'markdown': 1,
\}
let g:ycm_autoclose_preview_window_after_insertion = 1

" open complete option descriptions in popup instead of preview window
" TODO - how to scroll?
let g:ycm_add_preview_to_completeopt = 1
set completeopt=popup

" disable diagnostics to avoid slowdown (in macvim anyway)
let g:ycm_show_diagnostics_ui = 0
let g:ycm_echo_current_diagnostic = 0

" with jedi this will jump to the function/class definition, rather than the import
nnoremap <leader>d :YcmCompleter GoToType<CR>
" this will jump to the import
nnoremap <leader>f :YcmCompleter GoToDefinition<CR>
nnoremap <leader>r :YcmCompleter GoToReferences<CR>
" disable documentation auto popup
let g:ycm_auto_hover = ''
" manually turn it on for what's under the cursor
nmap <leader>g <Plug>(YCMHover)

" FZF
nmap <C-p> :Files<CR>
nmap <C-j> :Buffers<CR>


" POLYGLOT SYNTAX

" python - https://github.com/vim-python/python-syntax
let python_highlight_all = 1

" jsx
let g:jsx_ext_required = 0 " use on all filetypes

" javascript - https://github.com/pangloss/vim-javascript
let g:javascript_plugin_jsdoc = 1


" SLIME MODE FOR VIM
let g:slimv_repl_split = 4 " open repl in vertical split on the right
let g:paredit_mode = 0 " don't dicate parentheses!


" VIM WIKI
let g:vimwiki_folding = 'expr' " enable folding
let g:vimwiki_global_ext = 0 " don't enable for random markdown files!
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]
